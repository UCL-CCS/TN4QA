name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

before_script:
  - poetry config virtualenvs.in-project true

cache:
  paths:
    - .venv

jobs:
  pre-commit-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pre-commit
      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  build-and-test-python:
    runs-on: ubuntu-latest
    needs: pre-commit-ci
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          python -m poetry install
      - name: Analyze code with pylint
        run: |
          python -m pip install pylint
          pylint $(git ls-files '*.py')
        continue-on-error: true
      - name: Build
        run: python -m poetry install
      - name: Test and coverage
        run: |
          python -m pip install pytest pytest-cov
          python -m pytest --cov=tn4qa $(git ls-files 'test_*.py')
      - name: Mypy type checking
        run: |
          python -m pip install mypy
          mypy tn4qa

  coverage-python:
    runs-on: ubuntu-latest
    needs: pre-commit-ci
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install dependencies and tn4qa package
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          python -m poetry install
      - name: Compute code coverage
        run: |
          python -m pytest --cov=tn4qa --cov-report=xml:coverage.xml ./
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./coverage.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "50 75"
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: code-coverage
          recreate: true
          path: code-coverage-results.md
        continue-on-error: true
